/*
 * AZ ALMAZ - –°—É–¥–µ–±–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ —é–≤–µ–ª–∏—Ä–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π
 * –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø - –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã
 */

'use strict';

// ===================================================================
// TELEGRAM CONFIGURATION - –í–ê–ñ–ù–û –ù–ê–°–¢–†–û–ò–¢–¨!
// ===================================================================

const TELEGRAM_CONFIG = {
    botToken: '---',
    chatId: '---'
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
const isBotConfigured = TELEGRAM_CONFIG.botToken !== 'YOUR_BOT_TOKEN_HERE' && 
                        TELEGRAM_CONFIG.chatId !== 'YOUR_CHAT_ID_HERE';

// ===================================================================
// MOBILE MENU - –ï–¥–∏–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
// ===================================================================
function toggleMobileMenu() {
    const nav = document.getElementById('mobileNav');
    const toggle = document.querySelector('.mobile-menu-toggle');
    
    if (!nav || !toggle) return;
    
    nav.classList.toggle('active');
    toggle.classList.toggle('active');
    
    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º –º–µ–Ω—é
    if (nav.classList.contains('active')) {
        document.body.style.overflow = 'hidden';
    } else {
        document.body.style.overflow = '';
    }
}

function closeMobileMenu() {
    const nav = document.getElementById('mobileNav');
    const toggle = document.querySelector('.mobile-menu-toggle');
    
    if (!nav || !toggle) return;
    
    nav.classList.remove('active');
    toggle.classList.remove('active');
    document.body.style.overflow = '';
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
document.addEventListener('click', function(event) {
    const nav = document.getElementById('mobileNav');
    const toggle = document.querySelector('.mobile-menu-toggle');
    
    if (nav && nav.classList.contains('active')) {
        if (!nav.contains(event.target) && !toggle.contains(event.target)) {
            closeMobileMenu();
        }
    }
});

// ===================================================================
// SMOOTH SCROLL FUNCTIONS
// ===================================================================
function scrollToTop() {
    window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });
}

function scrollToContact() {
    const contactSection = document.getElementById('contact');
    if (contactSection) {
        contactSection.scrollIntoView({ 
            behavior: 'smooth',
            block: 'start'
        });
    }
}

function scrollToServices() {
    const servicesSection = document.getElementById('services');
    if (servicesSection) {
        servicesSection.scrollIntoView({ 
            behavior: 'smooth',
            block: 'start'
        });
    }
}

// ===================================================================
// FAQ TOGGLE
// ===================================================================
function toggleFAQ(button) {
    const faqItem = button.closest('.faq-item');
    if (!faqItem) return;
    
    const allItems = document.querySelectorAll('.faq-item');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ FAQ
    allItems.forEach(item => {
        if (item !== faqItem && item.classList.contains('active')) {
            item.classList.remove('active');
        }
    });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π FAQ
    faqItem.classList.toggle('active');
}

// ===================================================================
// MODAL WINDOW
// ===================================================================
function openModal(imageSrc) {
    const modal = document.getElementById('documentModal');
    const modalImage = document.getElementById('modalImage');
    
    if (modal && modalImage) {
        modalImage.src = imageSrc;
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }
}

function closeModal(event) {
    const modal = document.getElementById('documentModal');
    
    if (!modal) return;
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ overlay –∏–ª–∏ –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
    if (event.target === modal || event.target.classList.contains('modal-close')) {
        modal.classList.remove('active');
        document.body.style.overflow = '';
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ ESC
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        const modal = document.getElementById('documentModal');
        if (modal && modal.classList.contains('active')) {
            modal.classList.remove('active');
            document.body.style.overflow = '';
        }
    }
});

// ===================================================================
// STATISTICS COUNTER ANIMATION
// ===================================================================
function animateCounter(element) {
    const target = parseInt(element.getAttribute('data-target'));
    const duration = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã
    const increment = target / (duration / 16); // 60 FPS
    let current = 0;
    
    const timer = setInterval(() => {
        current += increment;
        if (current >= target) {
            element.textContent = target;
            clearInterval(timer);
        } else {
            element.textContent = Math.floor(current);
        }
    }, 16);
}

// Intersection Observer –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤
const statsObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            const counters = entry.target.querySelectorAll('.stat-value');
            counters.forEach(counter => {
                const currentValue = parseInt(counter.textContent);
                if (currentValue === 0) {
                    animateCounter(counter);
                }
            });
            statsObserver.unobserve(entry.target);
        }
    });
}, { threshold: 0.5 });

// ===================================================================
// PHONE INPUT FORMATTING
// ===================================================================
function formatPhoneNumber(input) {
    let value = input.value.replace(/\D/g, '');
    
    // –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ 8 –∏–ª–∏ 7
    if (value.length > 0 && (value[0] === '8' || value[0] === '7')) {
        value = value.substring(1);
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if (value.length > 10) {
        value = value.substring(0, 10);
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    let formatted = '+7';
    if (value.length > 0) {
        formatted += ' (' + value.substring(0, 3);
    }
    if (value.length >= 3) {
        formatted += ') ' + value.substring(3, 6);
    }
    if (value.length >= 6) {
        formatted += '-' + value.substring(6, 8);
    }
    if (value.length >= 8) {
        formatted += '-' + value.substring(8, 10);
    }
    
    input.value = formatted;
}

// ===================================================================
// NOTIFICATION SYSTEM
// ===================================================================
function showNotification(title, message, type = 'success') {
    const container = document.getElementById('notificationContainer');
    if (!container) return;
    
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <div class="notification-title">${title}</div>
        <div class="notification-message">${message}</div>
    `;
    
    container.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        notification.style.opacity = '0';
        notification.style.transform = 'translateX(400px)';
        setTimeout(() => {
            notification.remove();
        }, 300);
    }, 5000);
}

// ===================================================================
// TELEGRAM BOT INTEGRATION
// ===================================================================
async function sendToTelegram(formData) {
    if (!isBotConfigured) {
        console.error('Telegram bot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
        showNotification(
            '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
            '–í–ª–∞–¥–µ–ª–µ—Ü —Å–∞–π—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª Telegram –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.',
            'error'
        );
        return false;
    }
    
    const message = `
üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞</b>

üë§ <b>–ò–º—è:</b> ${formData.name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${formData.phone}
üõ† <b>–£—Å–ª—É–≥–∞:</b> ${formData.service}
üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${formData.message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üìÖ <b>–î–∞—Ç–∞:</b> ${new Date().toLocaleString('ru-RU')}
    `;
    
    try {
        const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_CONFIG.botToken}/sendMessage`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: TELEGRAM_CONFIG.chatId,
                text: message,
                parse_mode: 'HTML'
            })
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram');
        }
        
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
        return false;
    }
}

// ===================================================================
// FORM SUBMISSION
// ===================================================================
async function handleFormSubmit(event) {
    event.preventDefault();
    
    const form = event.target;
    const submitBtn = form.querySelector('.submit-btn');
    const originalText = submitBtn.textContent;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    const formData = {
        name: form.name.value.trim(),
        phone: form.phone.value.trim(),
        service: form.service.options[form.service.selectedIndex].text,
        message: form.message?.value.trim() || ''
    };
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!formData.name || !formData.phone || !form.service.value) {
        showNotification(
            '–û—à–∏–±–∫–∞',
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è',
            'error'
        );
        return;
    }
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    submitBtn.disabled = true;
    submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    const success = await sendToTelegram(formData);
    
    if (success) {
        showNotification(
            '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!',
            '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
            'success'
        );
        form.reset();
        
        // –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞ - —Ü–µ–ª—å
        if (typeof ym !== 'undefined') {
            ym(104537472, 'reachGoal', 'form_submit');
        }
        
        // Google Analytics - —Å–æ–±—ã—Ç–∏–µ
        if (typeof gtag !== 'undefined') {
            gtag('event', 'form_submit', {
                'event_category': 'engagement',
                'event_label': 'contact_form'
            });
        }
    } else {
        showNotification(
            '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏',
            '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7 (812) 923-20-07',
            'error'
        );
    }
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    submitBtn.disabled = false;
    submitBtn.textContent = originalText;
}

// ===================================================================
// HEADER SCROLL BEHAVIOR
// ===================================================================
let lastScroll = 0;

function handleHeaderScroll() {
    const header = document.querySelector('header');
    if (!header) return;
    
    const currentScroll = window.pageYOffset;
    
    // –°–∫—Ä—ã–≤–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–µ–¥–µ—Ä
    if (currentScroll > lastScroll && currentScroll > 100) {
        header.style.transform = 'translateY(-100%)';
    } else {
        header.style.transform = 'translateY(0)';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
    if (currentScroll > 50) {
        header.classList.add('scrolled');
    } else {
        header.classList.remove('scrolled');
    }
    
    lastScroll = currentScroll;
}

// ===================================================================
// FLOATING BUTTON VISIBILITY
// ===================================================================
function handleFloatingButtons() {
    const scrollTopBtn = document.querySelector('.floating-top-btn');
    if (!scrollTopBtn) return;
    
    if (window.pageYOffset > 500) {
        scrollTopBtn.classList.add('visible');
    } else {
        scrollTopBtn.classList.remove('visible');
    }
}

// ===================================================================
// SCROLL EVENT HANDLER
// ===================================================================
function handleScroll() {
    handleHeaderScroll();
    handleFloatingButtons();
}

// ===================================================================
// ARTICLE TOGGLE
// ===================================================================
function toggleArticle() {
    const article = document.getElementById('fullArticle');
    const button = event.target;
    
    if (!article || !button) return;
    
    if (article.classList.contains('active')) {
        article.classList.remove('active');
        button.textContent = '–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç—å—é';
        button.classList.remove('active');
    } else {
        article.classList.add('active');
        button.textContent = '–°–≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ç—å—é';
        button.classList.add('active');
        // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–∞—á–∞–ª—É —Å—Ç–∞—Ç—å–∏
        article.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
}

// ===================================================================
// PARALLAX EFFECT
// ===================================================================
function handleParallax() {
    const scrolled = window.pageYOffset;
    const parallax = document.querySelector('.hero-background');
    if (parallax) {
        parallax.style.transform = `translateY(${scrolled * 0.5}px)`;
    }
}

// ===================================================================
// IMAGE LAZY LOADING
// ===================================================================
function setupLazyLoading() {
    const images = document.querySelectorAll('img[loading="lazy"]');
    
    if ('IntersectionObserver' in window) {
        const imageObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    img.classList.add('loaded');
                    imageObserver.unobserve(img);
                }
            });
        });
        
        images.forEach(img => imageObserver.observe(img));
    }
}

// ===================================================================
// INITIALIZATION
// ===================================================================
document.addEventListener('DOMContentLoaded', function() {
    console.log('AZ ALMAZ - –°—É–¥–µ–±–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞
    const botWarning = document.getElementById('botSetupWarning');
    if (botWarning) {
        if (isBotConfigured) {
            botWarning.style.display = 'none';
        } else {
            console.warn('‚ö†Ô∏è Telegram bot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –§–æ—Ä–º–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.');
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
    const contactForm = document.getElementById('contactForm');
    if (contactForm) {
        contactForm.addEventListener('submit', handleFormSubmit);
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneInput = document.getElementById('phoneInput');
    if (phoneInput) {
        phoneInput.addEventListener('input', function() {
            formatPhoneNumber(this);
        });
        
        // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (!phoneInput.value) {
            phoneInput.value = '+7';
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const statsSection = document.querySelector('.statistics');
    if (statsSection) {
        statsObserver.observe(statsSection);
    }
    
    // Lazy loading –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    setupLazyLoading();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–æ–ª–ª–∞
    window.addEventListener('scroll', handleScroll);
    window.addEventListener('scroll', handleParallax);
    handleScroll(); // –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    
    // Smooth scroll –¥–ª—è –≤—Å–µ—Ö —è–∫–æ—Ä–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function(e) {
            const href = this.getAttribute('href');
            if (href === '#') return;
            
            e.preventDefault();
            const target = document.querySelector(href);
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
                closeMobileMenu();
            }
        });
    });
    
    // Intersection Observer –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
    const observerOptions = {
        threshold: 0.3,
        rootMargin: '0px 0px -100px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
            }
        });
    }, observerOptions);

    // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    document.querySelectorAll('.service-card, .timeline-item, .testimonial-card').forEach(el => {
        el.classList.add('animate-on-scroll');
        observer.observe(el);
    });
    
    console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
});

// ===================================================================
// PERFORMANCE MONITORING
// ===================================================================
window.addEventListener('load', function() {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if ('performance' in window) {
        const perfData = performance.getEntriesByType('navigation')[0];
        if (perfData) {
            const loadTime = perfData.loadEventEnd - perfData.fetchStart;
            console.log(`‚ö° –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${Math.round(loadTime)}ms`);
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Google Analytics
            if (typeof gtag !== 'undefined') {
                gtag('event', 'timing_complete', {
                    'name': 'page_load',
                    'value': Math.round(loadTime),
                    'event_category': 'Performance'
                });
            }
        }
    }
});

// ===================================================================
// ERROR HANDLING
// ===================================================================
window.addEventListener('error', function(event) {
    console.error('JavaScript Error:', event.error);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª—å
    if (event.error && event.error.stack) {
        console.error('Stack trace:', event.error.stack);
    }
});

// ===================================================================
// EXPORT FUNCTIONS TO GLOBAL SCOPE
// ===================================================================
window.toggleMobileMenu = toggleMobileMenu;
window.closeMobileMenu = closeMobileMenu;
window.scrollToTop = scrollToTop;
window.scrollToContact = scrollToContact;
window.scrollToServices = scrollToServices;
window.toggleFAQ = toggleFAQ;
window.openModal = openModal;
window.closeModal = closeModal;
window.toggleArticle = toggleArticle;
